services:
    images-postgres:
        env_file:
            - path: ../.env
              required: true
        image: postgres:alpine
        container_name: ${IMAGES_POSTGRES_HOSTNAME}
        hostname: ${IMAGES_POSTGRES_HOSTNAME}
        environment:
            POSTGRES_DB: ${IMAGES_POSTGRES_DB}
            POSTGRES_USER: ${IMAGES_POSTGRES_USER}
            POSTGRES_PASSWORD: ${IMAGES_POSTGRES_PASSWORD}
        ports:
            - "${IMAGES_POSTGRES_PORT}:5432"
        networks:
            - social365-network
        healthcheck:
            test: pg_isready -U postgres
            interval: 10s
            timeout: 10s
            retries: 10

    images-service:
        env_file:
            - path: ../.env
              required: true
        container_name: ${IMAGES_SERVICE_HOSTNAME}
        image: ${IMAGES_SERVICE_HOSTNAME}
        hostname: ${IMAGES_SERVICE_HOSTNAME}
        build:
            context: images-service
            dockerfile: Dockerfile.dev
        ports:
            - "${IMAGES_SERVICE_PORT}:${IMAGES_SERVICE_PORT}"
        volumes:
            - "images:${IMAGE_VOLUME_PATH}"
            - "./images-service:/home/images-service"
        healthcheck:
            test: [ "CMD", "curl", "--fail", "http://localhost:${IMAGES_SERVICE_PORT}/actuator/health" ]
            start_period: 25s
            interval: 10s
            timeout: 10s
            retries: 10
        networks:
            - social365-network
        depends_on:
            images-postgres:
                condition: service_healthy
            images-nginx:
                condition: service_healthy
            config-server:
                condition: service_healthy
            eureka-registry:
                condition: service_healthy

    images-nginx:
        env_file:
            - path: ../.env
              required: true
        container_name: ${IMAGES_NGINX_HOSTNAME}
        image: ${IMAGES_NGINX_HOSTNAME}
        hostname: ${IMAGES_NGINX_HOSTNAME}
        build:
            context: images-nginx
            dockerfile: Dockerfile
        ports:
            - "${IMAGES_NGINX_PORT}:${IMAGES_NGINX_PORT}"
        networks:
            - social365-network
        healthcheck:
            test: [ "CMD", "curl", "--fail", "http://localhost:${IMAGES_NGINX_PORT}" ]
            interval: 1s
            retries: 120
            start_period: 15s
            timeout: 10s
        volumes:
            - "images:${IMAGE_VOLUME_PATH}"

volumes:
    images:
