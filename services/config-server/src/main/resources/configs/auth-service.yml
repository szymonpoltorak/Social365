server:
    port: ${AUTH_SERVICE_PORT:8080}

    servlet:
        context-path: /

    server-header: ""

    http2:
        enabled: true

    compression:
        enabled: true
        mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
        min-response-size: 512

openapi:
    service:
        title: Authorisation Service
        version: 1.0.0
        url: http://${API_GATEWAY_HOSTNAME}:${API_GATEWAY_PORT}

springdoc:
    api-docs:
        path: /${AUTH_SERVICE_HOSTNAME}/v3/api-docs
    swagger-ui:
        path: /${AUTH_SERVICE_HOSTNAME}/swagger-ui.html

spring:
    datasource:
        url: ${AUTH_SPRING_DATASOURCE_URL}
        username: ${AUTH_POSTGRES_USER}
        password: ${AUTH_POSTGRES_PASSWORD}

    security:
        jwt:
            expiration-time: ${JWT_EXPIRATION_TIME}
            refresh-time: ${JWT_REFRESH_TIME}

    kafka:
        producer:
            bootstrap-servers: ${KAFKA_BROKER_HOSTNAME}:${KAFKA_PORT}
            key-serializer: org.apache.kafka.common.serialization.StringSerializer
            value-serializer: org.apache.kafka.common.serialization.StringSerializer

        consumer:
            auto-offset-reset: earliest
            key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
            value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
            bootstrap-servers: ${KAFKA_BROKER_HOSTNAME}:${KAFKA_PORT}
            properties:
                spring.json.trusted.packages: '*'
                spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
                spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
            group-id: ${KAFKA_NOTIFICATIONS_GROUP_ID}

    jpa:
        hibernate:
            ddl-auto: update
        show-sql: true

        properties:
            hibernate:
                jdbc:
                    lob:
                        non_contextual_creation: true
                dialect: org.hibernate.dialect.PostgreSQLDialect

                format_sql: true

kafka:
    topics:
        account-created: ${KAFKA_ACCOUNT_CREATED_TOPIC}
        account-logout: ${KAFKA_ACCOUNT_LOGOUT_TOPIC}

    group-ids:
        notifications: ${KAFKA_NOTIFICATIONS_GROUP_ID}

eureka:
    client:
        instance:
            hostname: ${EUREKA_REGISTRY_HOSTNAME}

        service-url:
            defaultZone: ${EUREKA_SERVER_URI}

        register-with-eureka: true
        fetch-registry: true
